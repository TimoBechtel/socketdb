on:
  push:
    branches:
      - main

name: release-please
jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: node
          package-name: '@socketdb'

      - name: Checkout
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - uses: nrwl/nx-set-shas@v3
        if: ${{ steps.release.outputs.release_created }}

      - name: Setup pnpm
        if: ${{ steps.release.outputs.release_created }}
        uses: pnpm/action-setup@v2.2.4
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Node setup
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'pnpm'

      - name: Install dependencies
        if: ${{ steps.release.outputs.release_created }}
        run: pnpm install --frozen-lockfile

      - name: Sync libraries package.json versions
        if: ${{ steps.release.outputs.release_created }}
        run: |
          node tools/scripts/sync-versions.mjs

      - name: Build
        if: ${{ steps.release.outputs.release_created }}
        # need to build all packages as we want to publish all with the same version
        run: pnpm nx run-many --target=build --parallel=3 --exclude=docs

      - name: Publish
        if: ${{ steps.release.outputs.release_created }}
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        #  publish all packages with the new version
        run: pnpm nx run-many --target publish --ver=${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }} --tag=latest
